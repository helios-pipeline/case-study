import{_ as c,e as n,f as l,g as e,N as a,m as s,u as d,c as i,o as h}from"./chunks/framework.CE9GIcbU.js";const o="/case-study/assets/core_full_color.BKwek0XW.png",u="/case-study/assets/core_clickhouse_highlight.ChTpqpAh.png",p="/case-study/assets/core_connector_highlight.DIwLuj7u.png",m="/case-study/assets/kinesis_integration1.CxipKTy_.png",g="/case-study/assets/kinesis_integration2.vj_pjSy2.png",f="/case-study/assets/core_client_server_highlight.D5vFvcJP.png",G=JSON.parse('{"title":"Helios Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"helios-architecture.md","filePath":"helios-architecture.md"}'),_={name:"helios-architecture.md"},b=e("h1",{id:"helios-architecture",tabindex:"-1"},[s("Helios Architecture "),e("a",{class:"header-anchor",href:"#helios-architecture","aria-label":'Permalink to "Helios Architecture"'},"​")],-1),y=e("p",null,"To meet the requirements of Amazon Kinesis users looking to explore and analyze their event streams, Helios is built around three key components:",-1),v={class:"icon-list"},w=e("span",null,[e("strong",null,"Storage"),s(" - A database optimized for querying streaming data, specifically an Online Analytical Processing (OLAP) database capable of handling high-volume, real-time data ingestion, and delivering fast query performance for analytical workloads.")],-1),k=e("span",null,[e("strong",null,"Connection"),s(" - An ingestion mechanism to efficiently transfer events from Kinesis streams into our chosen database.")],-1),A=e("span",null,[e("strong",null,"Interface"),s(" - A user-friendly graphical interface allowing users to conduct analyses and visualize results.")],-1),T=i("",18),C={class:"icon-list"},I=e("span",null,"Decode and parse Kinesis event data",-1),H=e("span",null," Implement custom error handling",-1),q=e("span",null," Dynamically map data to appropriate ClickHouse tables",-1),P=e("span",null," Perform efficient inserts",-1),S=e("p",null,"By leveraging Lambda, we created a flexible and scalable solution tailored to our specific data processing needs. Let's explore how this custom processor works in detail.",-1),x=e("h3",{id:"",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#","aria-label":'Permalink to ""'},"​")],-1),D=e("h3",{id:"kinesis-to-clickhouse-integration",tabindex:"-1"},[s("Kinesis to ClickHouse Integration "),e("a",{class:"header-anchor",href:"#kinesis-to-clickhouse-integration","aria-label":'Permalink to "Kinesis to ClickHouse Integration"'},"​")],-1),L=e("p",null,"Helios’ Lambda Processor is an AWS serverless function that serves as a connector between Amazon Kinesis event streams and ClickHouse tables. The Lambda’s main roles are to decode the events from the Kinesis stream and insert them into the ClickHouse database. The full process involves retrieving table information, preparing data for batch insertion, and attempting to insert the data into ClickHouse.",-1),K=i("",9),O={class:"icon-list"},z=e("span",null,"An interactive SQL console for querying data from event streams, enabling real-time data analysis",-1),W=e("span",null,"An interface for connecting a data source, such as a Kinesis stream, to the Helios architecture",-1),N=e("p",null,[s("Now that you have a good understanding of how Helios works, in the next section we will cover why we designed it in this way as well as the trade-offs made throughout the building of Helios. Here is our architecture so far: "),e("img",{src:o,alt:"Core Arch"})],-1);function B(V,E,j,$,J,R){const t=n("Icon"),r=n("TippyWrapper");return h(),l("div",null,[b,y,e("div",v,[e("p",null,[a(t,{name:"CircleStackIcon"}),w]),e("p",null,[a(t,{name:"LinkIcon"}),k]),e("p",null,[a(t,{name:"WindowIcon"}),A])]),T,e("div",C,[e("p",null,[a(t,{name:"DocumentMagnifyingGlassIcon"}),I]),e("p",null,[a(t,{name:"ExclamationTriangleIcon"}),H]),e("p",null,[a(t,{name:"TableCellsIcon"}),q]),e("p",null,[a(t,{name:"ArrowDownOnSquareIcon"}),P])]),S,x,D,L,e("p",null,[s("Using an event-based trigger, the function ingests "),a(r,{content:"In Amazon Kinesis, this is formally called a 'record'. However, for consistency and clarity in our discussion, we will continue to refer to it as an 'event' throughout this case study."},{default:d(()=>[s("event data")]),_:1}),s(" from AWS Kinesis streams, and decodes the Kinesis event payload into a JSON object.")]),K,e("div",O,[e("p",null,[a(t,{name:"CommandLineIcon"}),z]),e("p",null,[a(t,{name:"LinkIcon"}),W])]),N])}const U=c(_,[["render",B]]);export{G as __pageData,U as default};
